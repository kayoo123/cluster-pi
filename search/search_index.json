{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pr\u00e9face","text":"<p>Info</p> <ul> <li><code>05/04/2023</code>: Installation des cartes SD</li> <li><code>03/04/2023</code>: Inititialisation du projet et gestion du MKDocs/github</li> </ul>"},{"location":"#ce-que-jessaye-de-faire","title":"Ce que j'essaye de faire...","text":"<p>Je profite d'avoir quelques raspberry-pi sous la main pour d\u00e9buter une aventure.</p> <p>Celle de monter son propre \"petit\" cluster, pour jouer avec pas mal d'outils OPS \u00e0 la maison.</p>"},{"location":"#mes-objectifs","title":"Mes objectifs","text":"<p>Le but ici c'est d'apprendre tout en s'amusant et en partageant avec vous </p> <p>Ce qui sera au rendez-vous : </p> <ul> <li> MKdocs + github workflow</li> <li> DietPi-Automation</li> <li> Ansible</li> <li> Cluster Kubernetes avec K3s</li> <li> MetalLB</li> <li> Traefik</li> <li> Helm</li> <li> etc...</li> </ul> <p>test</p>"},{"location":"config/hardware/","title":"Hardware","text":""},{"location":"config/hardware/#raspberry-pi","title":"Raspberry-pi","text":"<p>Lorsque j'ai d\u00e9cid\u00e9 de monter ce petit cluster, j'ai d'abord voulu choisir pour lui le meilleur (Rock64, RPI4 8Go RAM, etc...). </p> <p>Mais avec la p\u00e9nurie des composants, c'est assez rare d'en trouver et les prix peuvent s'envoler tr\u00e8s haut   .</p> <p>Je me suis donc fait un choix de raison en selectionnant une version \"en dessous\", mais beaucoup plus accessible. La tr\u00e8s populaire <code>Raspberry pi modele 3 B+</code></p> <p>Cette petite carte est le parfait compromis : </p> <ul> <li>un SOC de 64-bit</li> <li>Un archi ARMv8</li> <li>Une frequence de 1.4Ghz</li> </ul> <p>Elle est, de plus, accessible assez simplement sur internet (merci le-bon-coin), pour un prix tr\u00e8s tr\u00e8s abordable. Mais n'hesit\u00e9 pas a demander autour de vous (collegues, amis ...) afin de completer votre collection.</p> <p>Elle n'a malheureusement que peu de RAM (1GB LPDDR2), mais n'est-ce pas justement le but de faire un cluster: Mutualiser les ressources </p> <p>je commence ce projet avec 4x Raspberry, mais il aura l'avantage de grossir au fil du temps.</p>"},{"location":"config/hardware/#carte-microsd","title":"Carte microSD","text":"<p>Concernant le stockage du systeme, je me rabbat sur la solution des cartes microSD. En effet, le boot sur USB n'est pr\u00e9sente que sur mise-a-jour du firmware et ne semble bien fonctionner que depuis les modeles 4. Le gain ne semble pas justifier cet usage.</p> <p>Todo</p> <p>Se pencher sur une solution SSD ou via reseau (boot PXE), pourrait etre interessant... A creuser</p> <p>Je reste donc a \u00e9plucher les bench pour identifier ce qui est n\u00e9cessaire pour mon cluster, au minimum : </p> <ul> <li><code>C10</code> : definissant la vitesse d'ecriture 10Mo/s.</li> <li><code>A1</code> : d\u00e9finissant les IOPS (input/output operations per second) - 1500 en read et 500 en write.</li> <li><code>16GB</code> : pour heberger l'OS + quelques packages/images</li> </ul> <p>Il n'est pas rare de trouver des lots carte SD \u00e0 des prix tr\u00e8s interessant. </p> <p>Par exemple sur amazon, j'ai pu acheter 3x cartes uSD Kingston de <code>64GB C10 A1</code> pour une quinzaine d'euros. </p> <p>Bien sur si vous trouvez des classe haute-vitesse (U3 - A2) pouvant allez jusqu'\u00e0 30Mo/s, c'est le top.  Mais toujours dans l'esprit \"cluster budget\" je me rabbat sur les solutions les plus \u00e9conomes. </p>"},{"location":"config/hardware/#stockage-ssd","title":"Stockage SSD","text":"<p>Todo</p>"},{"location":"config/software/","title":"Software","text":""},{"location":"config/software/#os-dietpi","title":"OS - DietPi","text":"<p>Apres avoir jou\u00e9 longtemps sur la distribution classique <code>Raspberry PI OS</code>, j'ai d\u00e9cid\u00e9 de donner sa chance \u00e0 une autre : DietPi.</p> <p>Ce petit frere, n'a rien a lui envier, et il a de bon argument pour devenir mon OS favori sur ce genre de projet : </p> <ul> <li>Version all\u00e9g\u00e9 (taille/process)</li> <li>Gestion de logs en RAM native</li> <li>Automatisation complete POST-Install</li> </ul> <p>Et bien plus encore : https://dietpi.com/#features</p>"},{"location":"config/software/#creation-du-support","title":"Creation du support","text":"<p>On va pr\u00e9parer nos cartes SD et flasher la derniere image de DietPi \u00e0 l'aide d'un super outil : <code>BalenaEtcher</code>.</p> <p>Une fois fait, ne d\u00e9marrer pas tout de suite vos petits serveurs, on va passer \u00e0 une \u00e9tape crucial, la configuration automatique de notre systeme.</p>"},{"location":"config/software/#dietpi-automation","title":"DietPi Automation","text":"<p>Merci DietPi, grace a toi, je m'evite de nombreuse manipulation manuelle pour la gestion de : </p> <ul> <li>Installation complete sans action de l'utilisation (on boot, on attend, et on profite)</li> <li>Gestion des locales (FR)</li> <li>Gestion USER/MDP</li> <li>D\u00e9sactivation du Wifi</li> <li>D\u00e9sactivation de l'IPv6</li> <li>Force une IP Fixe</li> <li>Set un nom de machine (Hostname)</li> <li>Gestion de la swap</li> <li>Gestion du boot</li> <li>Installation de packages </li> <li>et bien d'autre choses (OverClock,proxy,repo,etc...)</li> </ul> <p>Tout ce fait a partir d'un unique fichier (KISS), il est tr\u00e8s bien document\u00e9 mais voici en exemple ce que j'ai parametr\u00e9 : </p>"},{"location":"config/software/#dietpitxt","title":"Dietpi.txt","text":"<pre><code>AUTO_SETUP_ACCEPT_LICENSE=1\nAUTO_SETUP_LOCALE=C.UTF-8\nAUTO_SETUP_KEYBOARD_LAYOUT=us\nAUTO_SETUP_TIMEZONE=Europe/France\nAUTO_SETUP_NET_ETHERNET_ENABLED=1\nAUTO_SETUP_NET_WIFI_ENABLED=0\nAUTO_SETUP_NET_ETH_FORCE_SPEED=0\nAUTO_SETUP_NET_WIFI_COUNTRY_CODE=FR\n\nAUTO_SETUP_NET_USESTATIC=1\nAUTO_SETUP_NET_STATIC_IP=192.168.1.200\nAUTO_SETUP_NET_STATIC_MASK=255.255.255.0\nAUTO_SETUP_NET_STATIC_GATEWAY=192.168.1.1\nAUTO_SETUP_NET_STATIC_DNS=192.168.1.2\n\nAUTO_SETUP_DHCP_TO_STATIC=0\n\nAUTO_SETUP_NET_HOSTNAME=control01\n\nAUTO_SETUP_BOOT_WAIT_FOR_NETWORK=1\nAUTO_SETUP_SWAPFILE_SIZE=1\nAUTO_SETUP_SWAPFILE_LOCATION=/var/swap\nAUTO_SETUP_HEADLESS=1\nAUTO_UNMASK_LOGIND=0\nAUTO_SETUP_CUSTOM_SCRIPT_EXEC=0\nAUTO_SETUP_BACKUP_RESTORE=0\nAUTO_SETUP_SSH_SERVER_INDEX=-2\nAUTO_SETUP_LOGGING_INDEX=-1\nAUTO_SETUP_RAMLOG_MAXSIZE=200\n\nAUTO_SETUP_WEB_SERVER_INDEX=0\nAUTO_SETUP_DESKTOP_INDEX=0\nAUTO_SETUP_BROWSER_INDEX=0\nAUTO_SETUP_AUTOSTART_TARGET_INDEX=7\nAUTO_SETUP_AUTOSTART_LOGIN_USER=root\nAUTO_SETUP_GLOBAL_PASSWORD=dietpi\nAUTO_SETUP_AUTOMATED=1\nSURVEY_OPTED_IN=0\n\n\nAUTO_SETUP_INSTALL_SOFTWARE_ID=0    #OpenSSH Client\nAUTO_SETUP_INSTALL_SOFTWARE_ID=1    #Samba Client\nAUTO_SETUP_INSTALL_SOFTWARE_ID=20   #vim\nAUTO_SETUP_INSTALL_SOFTWARE_ID=105  #OpenSSH Server\nAUTO_SETUP_INSTALL_SOFTWARE_ID=130  #Python 3 pip\n\nCONFIG_CPU_GOVERNOR=schedutil\nCONFIG_CPU_ONDEMAND_SAMPLE_RATE=25000\nCONFIG_CPU_ONDEMAND_SAMPLE_DOWNFACTOR=40\nCONFIG_CPU_USAGE_THROTTLE_UP=50\n\nCONFIG_CPU_MAX_FREQ=Disabled\nCONFIG_CPU_MIN_FREQ=Disabled\n\nCONFIG_CPU_DISABLE_TURBO=0\n\nCONFIG_PROXY_ADDRESS=MyProxyServer.com\nCONFIG_PROXY_PORT=8080\nCONFIG_PROXY_USERNAME=\nCONFIG_PROXY_PASSWORD=\n\nCONFIG_G_CHECK_URL_TIMEOUT=10\nCONFIG_G_CHECK_URL_ATTEMPTS=5\nCONFIG_CHECK_CONNECTION_IP=9.9.9.9\nCONFIG_CHECK_DNS_DOMAIN=dns9.quad9.net\n\nCONFIG_CHECK_DIETPI_UPDATES=1\nCONFIG_CHECK_APT_UPDATES=1\nCONFIG_NTP_MODE=2\nCONFIG_SERIAL_CONSOLE_ENABLE=0\nCONFIG_SOUNDCARD=none\nCONFIG_LCDPANEL=none\nCONFIG_ENABLE_IPV6=0\n\nCONFIG_APT_RASPBIAN_MIRROR=http://raspbian.raspberrypi.org/raspbian/\nCONFIG_APT_DEBIAN_MIRROR=https://deb.debian.org/debian/\nCONFIG_NTP_MIRROR=debian.pool.ntp.org\n\n#------------------------------------------------------------------------------------------------------\n##### DietPi-Software settings #####\n#------------------------------------------------------------------------------------------------------\nSOFTWARE_DISABLE_SSH_PASSWORD_LOGINS=0\n\n#------------------------------------------------------------------------------------------------------\n##### Dev settings #####\n#------------------------------------------------------------------------------------------------------\nDEV_GITBRANCH=master\nDEV_GITOWNER=MichaIng\n\n#------------------------------------------------------------------------------------------------------\n##### Settings, automatically added by dietpi-update #####\n#------------------------------------------------------------------------------------------------------\n</code></pre> <p>Vous pouvez ensuite simplement changer l'<code>IP</code> et le <code>HOSTNAME</code>, celon votre usages :  <pre><code>AUTO_SETUP_NET_HOSTNAME=control01\nAUTO_SETUP_NET_STATIC_IP=192.168.1.200\n</code></pre></p>"},{"location":"config/software/#cmdlinetxt","title":"cmdline.txt","text":"<p>On va profiter et rajouter 3 cl\u00e9s qui serviront pour installer notre cluster Kubernetes - K3s.</p> <p>Editer le fichier cmdline.txt et ajouter \u00e0 la fin : <code>group_enable=cpuset cgroup_enable=memory cgroup_memory=1</code></p> <p>Par exemple :</p> <pre><code>root=PARTUUID=00858852-02 rootfstype=ext4 rootwait net.ifnames=0 logo.nologo console=serial0,115200 console=tty1 group_enable=cpuset cgroup_enable=memory cgroup_memory=1\n</code></pre>"},{"location":"install/ansible/","title":"Ansible","text":""},{"location":"install/ansible/#inventory","title":"Inventory","text":"<p>Toujours sur notre node <code>control01</code>, nous allons installer l'outil ansible nous permettant de lancer des actions sur l'ensemble des noeuds du cluster (y compris soit-m\u00eame).</p> <pre><code>## Installation \napt install -y ansible\n\n## Creation de l'inventaire\nmkdir /etc/ansible\n\ncat &lt;&lt;EOF&gt;/etc/ansible/hosts\n[control]\ncontrol01  ansible_connection=local\n\n[nodes]\nnode01  ansible_connection=ssh\nnode02  ansible_connection=ssh\nnode03  ansible_connection=ssh\n\n[cube:children]\ncontrol\nnodes\nEOF\n</code></pre> <p>Pour le test, on va simplement voir le retour du ping : </p> <pre><code>ansible cube -m ping\n</code></pre>"},{"location":"install/ansible/#installation-iptables","title":"Installation IPtables","text":"<p>Et nous voil\u00e0 partie, on va pouvoir finaliser notre systeme en installant le package <code>iptables</code> qui sera n\u00e9cessaire pour l'utilisation du K3s :</p> <pre><code>ansible cube -m apt -a \"name=iptables state=present\" --become\nansible nodes -b -m shell -a \"reboot\"\n</code></pre>"},{"location":"install/k3s/","title":"K3s","text":"<p>Voil\u00e0 enfin le chapitre interessant, l'installation de notre cluster K3s.</p> <p>Comme d'habitude, toutes les actions seront jou\u00e9es depuis le node <code>control01</code>. </p>"},{"location":"install/k3s/#installation-du-packages","title":"Installation du packages","text":""},{"location":"install/k3s/#sur-le-master","title":"sur le master :","text":"<pre><code>curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644 --disable servicelb --token dietpi --bind-address 192.168.1.200 --disable-cloud-controller --disable local-storage\n\nkubectl get nodes\n</code></pre>"},{"location":"install/k3s/#sur-les-nodes","title":"sur les nodes :","text":"<pre><code>ansible nodes -b -m shell -a \"curl -sfL https://get.k3s.io | K3S_URL=https://192.168.1.200:6443 K3S_TOKEN=dietpi sh -\"\n\nkubectl get nodes\n</code></pre>"},{"location":"install/k3s/#gestion-des-roleslabels","title":"Gestion des Roles/Labels","text":"<p>Afin de s'y retrouver nous allons rajouter des roles et des labels \u00e0 nos nodes.</p> <pre><code>## add Roles \nfor i in $(seq -w 01 03); do \n  kubectl label nodes node$i kubernetes.io/role=worker\ndone\nkubectl get nodes\n\n## add labels\nfor i in $(seq -w 01 03); do \n  kubectl label nodes node$i node-type=worker\ndone\nkubectl get nodes --show-labels\n</code></pre>"},{"location":"install/k3s/#environment","title":"Environment","text":"<p>Nous allons d\u00e9finir une variable d'environment, pour aider HELM a trouver les configurations Kubernetes.</p> <pre><code>ansible cube -b -m lineinfile -a \"path='/etc/environment' line='KUBECONFIG=/etc/rancher/k3s/k3s.yaml'\"\n</code></pre>"},{"location":"install/ssh/","title":"SSH","text":""},{"location":"install/ssh/#dns","title":"DNS","text":"<p>Afin de discuter simplement avec le nom d'equipement (et non par adressage IP), nous allons renseigner notre fichier d'hosts sur notre noeud control01.</p> <p>Note</p> <p>Bien sur, si vous utilisez un serveur DNS comme moi, il est plus simple de l'utiliser afin de forcer la r\u00ebsolution DNS sur l'ensemble des p\u00e9ripheriques de votre reseau.</p> <p>Connectez-vous sur le node : <code>control01</code> et \u00e9diter le fichier <code>/etc/hosts</code> <pre><code>127.0.0.1 localhost\n\n192.168.1.200 control01 control01.local\n192.168.1.201 node01 node01.local\n192.168.1.202 node02 node02.local\n192.168.1.203 node03 node03.local\n</code></pre></p>"},{"location":"install/ssh/#cle-ssh","title":"Cl\u00e9 SSH","text":"<p>Ensuite, nous allons faire en sorte que le node <code>control01</code> est acc\u00e8s aux autres nodes, via cl\u00e9 SSH. Comme ca, nous lui ferons confiance et nous n'aurons plus a renseigner un mot de passe (ce qui sera utile pour la suite avec ansible).</p> <pre><code>ssh-keygen -t rsa -q -N \"\" -f ~/.ssh/cube\nssh-copy-id -i ~/.ssh/cube.pub root@node01\nssh-copy-id -i ~/.ssh/cube.pub root@node02\nssh-copy-id -i ~/.ssh/cube.pub root@node03\n</code></pre>"}]}